{
  "topic": "Advanced Object-Oriented Programming in Python",
  "questions": [
    {
      "question": "Which of the following Python data structures maintains insertion order and is mutable?",
      "options": [
        {
          "text": "tuple",
          "correct": false,
          "explanation": "‚ö†Ô∏è Tuples are immutable and do not support item assignment."
        },
        {
          "text": "list",
          "correct": true,
          "explanation": "üéâ Lists are ordered, mutable collections in Python."
        },
        {
          "text": "set",
          "correct": false,
          "explanation": "‚ö†Ô∏è Sets do not guarantee insertion order prior to Python 3.7 and are unordered by design."
        },
        {
          "text": "frozenset",
          "correct": false,
          "explanation": "‚ö†Ô∏è Frozensets are immutable and unordered."
        }
      ]
    },
    {
      "question": "What is the time complexity of accessing the first item of a list in Python using indexing (e.g., lst[0])?",
      "options": [
        {
          "text": "O(n)",
          "correct": false,
          "explanation": "‚ö†Ô∏è O(n) would imply linear search, which does not apply to direct indexing."
        },
        {
          "text": "O(log n)",
          "correct": false,
          "explanation": "‚ö†Ô∏è Binary search takes O(log n), not simple indexing."
        },
        {
          "text": "O(1)",
          "correct": true,
          "explanation": "Direct access by index is a constant-time operation in Python lists."
        },
        {
          "text": "O(n^2)",
          "correct": false,
          "explanation": "‚ö†Ô∏è Quadratic time would apply to nested loops, not indexing."
        }
      ]
    },
    {
      "question": "True or False: Bubble sort is a good choice for large datasets due to its average time complexity of O(n log n).",
      "options": [
        {
          "text": "True",
          "correct": false,
          "explanation": "‚ö†Ô∏è Bubble sort has average and worst-case time complexity of O(n¬≤), which is inefficient for large datasets."
        },
        {
          "text": "False",
          "correct": true,
          "explanation": "üéâ Bubble sort is generally inefficient for large datasets due to its O(n¬≤) time complexity."
        }
      ]
    },
    {
      "question": "Which of the following statements about binary search is FALSE?",
      "options": [
        {
          "text": "It requires the input list to be sorted.",
          "correct": false,
          "explanation": "‚ö†Ô∏è This is true. Binary search only works on sorted data."
        },
        {
          "text": "Its worst-case time complexity is O(log n).",
          "correct": false,
          "explanation": "‚ö†Ô∏è This is correct; each step halves the search space."
        },
        {
          "text": "It always checks every element in the list.",
          "correct": true,
          "explanation": "üéâ False. Binary search checks a logarithmic number of elements, not all."
        },
        {
          "text": "Its space complexity is O(1) if implemented iteratively.",
          "correct": false,
          "explanation": "‚ö†Ô∏è This is true for the iterative version."
        }
      ]
    },
    {
      "question": "Which Python standard library structure would you use for a thread-safe FIFO queue?",
      "options": [
        {
          "text": "deque",
          "correct": false,
          "explanation": "‚ö†Ô∏è `deque` is efficient and supports FIFO operations but is not thread-safe by default."
        },
        {
          "text": "list",
          "correct": false,
          "explanation": "‚ö†Ô∏è `list` is not thread-safe and can be inefficient for queue operations."
        },
        {
          "text": "queue.Queue",
          "correct": true,
          "explanation": "üéâ `queue.Queue` is a thread-safe FIFO queue implementation provided by the `queue` module."
        },
        {
          "text": "heapq",
          "correct": false,
          "explanation": "‚ö†Ô∏è `heapq` is for priority queues, not FIFO, and is not thread-safe."
        }
      ]
    }
  ]
}