{
  "topic": "Building Command-Line Applications with Python",
  "questions": [
    {
      "question": "What does defining an entry point in `[project.scripts]` inside `pyproject.toml` achieve for a CLI tool?",
      "options": [
        {
          "text": "It automatically adds your package to the system PATH.",
          "correct": false,
          "explanation": "‚ö†Ô∏è PATH is not modified directly; packaging tools create a console script that launches your function."
        },
        {
          "text": "It creates a console script so users can run your tool by name (e.g., `mycli`) after installation.",
          "correct": true,
          "explanation": "üéâ The `[project.scripts]` table maps a command name to `module:function`, generating an executable on install."
        },
        {
          "text": "It enables automatic dependency resolution for development-only packages.",
          "correct": false,
          "explanation": "‚ö†Ô∏è Dependency resolution is handled by the `dependencies` section or your build backend, not by `[project.scripts]`."
        },
        {
          "text": "It compiles your app to a native binary.",
          "correct": false,
          "explanation": "‚ö†Ô∏è Packaging creates a small launcher script, not a native binary."
        }
      ]
    },
    {
      "question": "Which statement best describes why logging is preferred over `print` in CLI apps?",
      "options": [
        {
          "text": "`print` is slower than the logging module.",
          "correct": false,
          "explanation": "‚ö†Ô∏è Speed is not the main reason; configurability and levels are."
        },
        {
          "text": "Logging supports levels, handlers (console/file), and configurable verbosity.",
          "correct": true,
          "explanation": "üéâ Logging lets users control output with levels and handlers; this is a best practice for real tools."
        },
        {
          "text": "Logging is required for packaging to work properly.",
          "correct": false,
          "explanation": "‚ö†Ô∏è Packaging is unrelated to the logging choice."
        },
        {
          "text": "`print` cannot output to stderr.",
          "correct": false,
          "explanation": "‚ö†Ô∏è You can write to stderr with `print(..., file=sys.stderr)`; logging is chosen for richer control."
        }
      ]
    },
    {
      "question": "In your chapter's examples, which libraries are shown for parsing CLI arguments?",
      "options": [
        {
          "text": "`argparse` and `click`",
          "correct": true,
          "explanation": "üéâ Both `argparse` (stdlib) and `click` (third-party) are demonstrated for argument parsing."
        },
        {
          "text": "`optparse` and `docopt`",
          "correct": false,
          "explanation": "‚ö†Ô∏è `optparse` is deprecated; `docopt` isn‚Äôt shown in the chapter."
        },
        {
          "text": "`fire` and `typer`",
          "correct": false,
          "explanation": "‚ö†Ô∏è They are popular, but the chapter examples focus on `argparse` and `click`."
        },
        {
          "text": "`getopt` and `click`",
          "correct": false,
          "explanation": "‚ö†Ô∏è `getopt` is low level and not used in the examples."
        }
      ]
    },
    {
      "question": "What is the primary benefit of the Command pattern when building a CLI like 'task manager'?",
      "options": [
        {
          "text": "It improves numeric performance of math operations.",
          "correct": false,
          "explanation": "‚ö†Ô∏è Command is about encapsulating actions, not math performance."
        },
        {
          "text": "It encapsulates requests (actions) as objects, enabling undo, logging, and queueing.",
          "correct": true,
          "explanation": "üéâ Commands make actions first-class objects, which is ideal for CLIs that add/list/do/undo operations."
        },
        {
          "text": "It automatically generates help text for your CLI.",
          "correct": false,
          "explanation": "‚ö†Ô∏è Help text is handled by arg parsing libraries, not the Command pattern."
        },
        {
          "text": "It eliminates the need for argument parsing.",
          "correct": false,
          "explanation": "‚ö†Ô∏è You still need `argparse`/`click` for parsing CLI inputs."
        }
      ]
    },
    {
      "question": "Why map `mycli = \"mycli.cli:main\"` in `pyproject.toml` instead of telling users to run `python -m mycli.cli`?",
      "options": [
        {
          "text": "It enforces virtualenv usage.",
          "correct": false,
          "explanation": "‚ö†Ô∏è Entry points do not enforce environments; they just create a convenient launcher."
        },
        {
          "text": "It provides a polished UX: users type `mycli` anywhere after installation.",
          "correct": true,
          "explanation": "üéâ Console scripts make your CLI feel like `git` or `pytest`, no path spelunking needed."
        },
        {
          "text": "It compiles Python code to C for speed.",
          "correct": false,
          "explanation": "‚ö†Ô∏è No compilation is involved."
        },
        {
          "text": "It disables `__main__` module execution.",
          "correct": false,
          "explanation": "‚ö†Ô∏è You can still run modules with `python -m`; entry points are an additional convenience."
        }
      ]
    },
    {
      "question": "What's a simple, test-friendly way to run end-to-end tests for a CLI tool?",
      "options": [
        {
          "text": "Call internal functions directly to avoid process creation.",
          "correct": false,
          "explanation": "‚ö†Ô∏è That tests internals; E2E should exercise the CLI boundary."
        },
        {
          "text": "Use `pytest` and `subprocess.run([...], capture_output=True, text=True)` to invoke commands.",
          "correct": true,
          "explanation": "üéâ Spawning the CLI binary/script simulates real user usage and lets you assert on stdout/stderr/exit codes."
        },
        {
          "text": "Edit the PATH during tests to point to your source directories.",
          "correct": false,
          "explanation": "‚ö†Ô∏è Not necessary; prefer `pip install -e .` and call the console script."
        },
        {
          "text": "Mock out `argparse` so tests don‚Äôt need to pass arguments.",
          "correct": false,
          "explanation": "‚ö†Ô∏è You want to test argument parsing too in E2E."
        }
      ]
    },
    {
      "question": "True or False: A single `pyproject.toml` can define multiple console scripts for separate CLIs in the same package.",
      "options": [
        {
          "text": "True",
          "correct": true,
          "explanation": "üéâ You can have many entries under `[project.scripts]`, each mapping a name to `module:function`."
        },
        {
          "text": "False",
          "correct": false,
          "explanation": "‚ö†Ô∏è The table accepts multiple entries, enabling multiple commands from one distribution."
        }
      ]
    },
    {
      "question": "Which is a good default behavior for a daemon-like CLI loop (e.g., `wf-queue listen`)?",
      "options": [
        {
          "text": "Run endlessly without any way to stop it.",
          "correct": false,
          "explanation": "‚ö†Ô∏è Always support `Ctrl+C` (SIGINT) and graceful shutdown."
        },
        {
          "text": "Process items in a loop with small sleeps, handle SIGINT to exit cleanly, and log progress.",
          "correct": true,
          "explanation": "üéâ Graceful exits and observable logs are essential for ops and tests."
        },
        {
          "text": "Flush all logs only at process exit for performance.",
          "correct": false,
          "explanation": "‚ö†Ô∏è Buffering everything is risky; prefer normal logging handlers and levels."
        },
        {
          "text": "Use random backoffs so behavior is non-deterministic in tests.",
          "correct": false,
          "explanation": "‚ö†Ô∏è Avoid flakiness; keep loops deterministic for local dev."
        }
      ]
    }
  ]
}
