{
  "topic": "3rd Party Python Modules and Publishing",
  "questions": [
    {
      "question": "Which command installs the exact version 2.28.1 of the `requests` package?",
      "options": [
        {
          "text": "pip install requests=2.28.1",
          "correct": false,
          "explanation": "‚ö†Ô∏è The single equals sign is incorrect; pip uses `==` for exact versions."
        },
        {
          "text": "pip install requests==2.28.1",
          "correct": true,
          "explanation": "üéâ Correct syntax: `==` pins an exact version in pip."
        },
        {
          "text": "pip add requests@2.28.1",
          "correct": false,
          "explanation": "‚ö†Ô∏è `pip add` is not a valid command; this syntax is from npm (Node.js)."
        },
        {
          "text": "pipenv lock requests==2.28.1",
          "correct": false,
          "explanation": "‚ö†Ô∏è Locking is handled by Pipenv, but this is not how you install with pip."
        }
      ]
    },
    {
      "question": "True or False: Virtual environments allow different Python projects to use conflicting dependency versions without interfering with each other.",
      "options": [
        {
          "text": "True",
          "correct": true,
          "explanation": "üéâ Correct. Virtual environments isolate dependencies per project."
        },
        {
          "text": "False",
          "correct": false,
          "explanation": "‚ö†Ô∏è Without virtual environments, dependency conflicts are likely."
        }
      ]
    },
    {
      "question": "What is the purpose of a `Pipfile.lock`?",
      "options": [
        {
          "text": "It lists human-readable dependencies for developers.",
          "correct": false,
          "explanation": "‚ö†Ô∏è That's the purpose of the `Pipfile`."
        },
        {
          "text": "It locks exact versions and hashes for reproducible builds.",
          "correct": true,
          "explanation": "üéâ `Pipfile.lock` ensures consistent installations across environments."
        },
        {
          "text": "It replaces the virtual environment folder.",
          "correct": false,
          "explanation": "‚ö†Ô∏è The lock file does not replace the environment; it only records dependency details."
        },
        {
          "text": "It builds and uploads packages to PyPI.",
          "correct": false,
          "explanation": "‚ö†Ô∏è Publishing is handled by tools like `twine`, not by Pipfile.lock."
        }
      ]
    },
    {
      "question": "In `pyproject.toml`, what does the `[build-system]` section define?",
      "options": [
        {
          "text": "The Python interpreter version to use.",
          "correct": false,
          "explanation": "‚ö†Ô∏è Interpreter version is defined under `[project]` or `[requires]`."
        },
        {
          "text": "The build backend and dependencies required to build the project.",
          "correct": true,
          "explanation": "üéâ Correct. `[build-system]` specifies setuptools, flit, poetry, etc."
        },
        {
          "text": "The runtime dependencies of the project.",
          "correct": false,
          "explanation": "‚ö†Ô∏è Those go under `[project.dependencies]` or tool-specific sections."
        },
        {
          "text": "Linting and formatting rules for Black, Ruff, etc.",
          "correct": false,
          "explanation": "‚ö†Ô∏è Tool-specific configs go under `[tool.*]` sections."
        }
      ]
    },
    {
      "question": "Which of the following is TRUE about `pip install -e .`?",
      "options": [
        {
          "text": "It installs the package permanently into the global site-packages.",
          "correct": false,
          "explanation": "‚ö†Ô∏è No, it installs the package in 'editable' mode for development."
        },
        {
          "text": "It installs the package in editable mode, reflecting source code changes immediately.",
          "correct": true,
          "explanation": "üéâ Correct. Useful for development workflows."
        },
        {
          "text": "It uploads your package to PyPI.",
          "correct": false,
          "explanation": "‚ö†Ô∏è `twine upload` handles publishing, not `pip install -e .`."
        },
        {
          "text": "It creates a lock file automatically.",
          "correct": false,
          "explanation": "‚ö†Ô∏è No, `pip` does not create lock files; Pipenv and Poetry do."
        }
      ]
    }
  ]
}
